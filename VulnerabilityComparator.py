import pandas as pd
import scipy.stats as stats
import os

class VulnerabilityComparator:
    def __init__(self, source_file, aggregated_file, output_file):
        self.source_file = source_file
        self.aggregated_file = aggregated_file
        self.output_file = output_file

    def compare(self):
        """
        Compares vulnerability distributions in source code vs. dependencies.
        """
        df_source = pd.read_csv(self.source_file)
        df_aggregated = pd.read_csv(self.aggregated_file)

        common_categories = set(df_source['Category']).intersection(set(df_aggregated['Category']))
        results = []

        for category in common_categories:
            vp_source = df_source[df_source['Category'] == category]['vulnerability-proneness-source'].dropna()
            vp_all = df_aggregated[df_aggregated['Category'] == category]['vulnerability-proneness-all'].dropna()

            if len(vp_source) < 3 or len(vp_all) < 3:
                results.append([category, "Insufficient data", "N/A", "N/A"])
                continue

            shapiro_source = stats.shapiro(vp_source) if len(vp_source) > 3 else (None, None)
            shapiro_all = stats.shapiro(vp_all) if len(vp_all) > 3 else (None, None)

            if shapiro_source.pvalue > 0.05 and shapiro_all.pvalue > 0.05:
                test_stat, p_value = stats.ttest_ind(vp_source, vp_all, equal_var=False)
                test_name = "T-Test"
            else:
                test_stat, p_value = stats.mannwhitneyu(vp_source, vp_all, alternative='two-sided')
                test_name = "Mann-Whitney U"

            results.append([category, test_name, test_stat, p_value])

        df_results = pd.DataFrame(results, columns=["Category", "Test Used", "Test Statistic", "p-value"])
        df_results.to_csv(self.output_file, index=False)
        print(f"Comparison results saved to: {self.output_file}")

        return df_results
