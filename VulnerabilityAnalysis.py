import pandas as pd
import os
import scipy.stats as stats

class VulnerabilityAnalysis:
    def __init__(self, results_path="results/"):
        """
        Inicializa la clase VulnerabilityAnalysis con una carpeta de resultados.
        """
        self.results_path = results_path
        os.makedirs(self.results_path, exist_ok=True)
    
    def compute_statistics(self, df):
        """
        Calcula estadísticas clave relacionadas con la vulnerability-proneness (mínimo, máximo,
        media, mediana y desviación estándar) agrupadas por categoría.
        
        Si la columna 'vulnerability-proneness' no existe pero sí 'vulnerability-proneness-all',
        se renombra para la compatibilidad.
        """
        # Verificar que la columna requerida exista
        if 'vulnerability-proneness' not in df.columns:
            if 'vulnerability-proneness-all' in df.columns:
                df = df.rename(columns={'vulnerability-proneness-all': 'vulnerability-proneness'})
            else:
                raise KeyError("No se encontró la columna 'vulnerability-proneness' ni 'vulnerability-proneness-all'.")
        
        # Agrupar por 'Category' y calcular estadísticas
        grouped = df.groupby('Category').agg(
            actions_count=('vulnerability-proneness', 'size'),
            vulnerabilities_list=('vulnerability-proneness', list),
            min_vp=('vulnerability-proneness', 'min'),
            max_vp=('vulnerability-proneness', 'max'),
            mean_vp=('vulnerability-proneness', 'mean'),
            median_vp=('vulnerability-proneness', 'median'),
            std_vp=('vulnerability-proneness', 'std')
        ).reset_index()
        
        # Filtrar categorías con al menos 2 acciones
        filtered = grouped[grouped['actions_count'] >= 2]
        filtered = filtered.sort_values(by='median_vp', ascending=True)
        
        # Guardar las estadísticas en un archivo CSV
        output_file = os.path.join(self.results_path, "vp_stats.csv")
        filtered.to_csv(output_file, index=False)
        print(f"Vulnerability-proneness statistics saved to: {output_file}")
        
        return filtered

    def perform_kruskal_wallis_test(self, df):
        """
        Realiza la prueba estadística Kruskal-Wallis para comparar la distribución de vulnerability-proneness
        entre categorías.
        """
        # Convertir a lista si es necesario (puede venir como string de lista)
        df['vulnerabilities_list'] = df['vulnerabilities_list'].apply(
            lambda x: eval(x) if isinstance(x, str) and x.startswith('[') else x
        )
        category_data = {row['Category']: row['vulnerabilities_list'] for _, row in df.iterrows()}
        kruskal_stat, kruskal_p_value = stats.kruskal(*category_data.values())
        
        # Guardar los resultados en CSV
        kruskal_results_df = pd.DataFrame([[kruskal_stat, kruskal_p_value]],
                                          columns=['Kruskal-Wallis Statistic', 'p-value'])
        kruskal_results_path = os.path.join(self.results_path, "kruskal_wallis_results.csv")
        kruskal_results_df.to_csv(kruskal_results_path, index=False)
        
        # Guardar en un archivo de texto
        test_results = [f"Kruskal-Wallis Test Statistic: {kruskal_stat:.4f}, p-value: {kruskal_p_value:.4f}"]
        kruskal_txt_path = os.path.join(self.results_path, "kruskal_wallis_results.txt")
        with open(kruskal_txt_path, 'w', encoding='utf-8') as f:
            f.write("\n".join(test_results))
        print(f"Kruskal-Wallis test results saved to: {kruskal_txt_path}")
        
        return kruskal_stat, kruskal_p_value
