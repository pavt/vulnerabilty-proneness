import os
import pandas as pd

class VulnerabilityAggregator:
    def __init__(self, results_path="results/"):
        self.results_path = results_path
        os.makedirs(self.results_path, exist_ok=True)  # Asegurar que la carpeta de resultados exista

    @staticmethod
    def combine_cwe_tags(tags):
        """
        Combina etiquetas CWE de diferentes fuentes y elimina duplicados.
        """
        combined = []
        for tag_list in tags:
            if pd.notna(tag_list):
                combined.extend(eval(tag_list) if isinstance(tag_list, str) else tag_list)
        return list(set(combined))
    
    def aggregate(self, df):
            """
            Procesa el DataFrame de código fuente, calculando la columna 
            'vulnerability-proneness-source' como la suma de las columnas Low, Medium, High y Critical,
            y guarda el resultado en '1_vp_source_all_severities.csv'.
            """
            # Calcular vulnerability-proneness basado en todas las categorías de severidad
            df["vulnerability-proneness-source"] = df["Low"] + df["Medium"] + df["High"] + df["Critical"]
            
            # Guardar el nuevo conjunto de datos sin perder las columnas originales
            output_file_path = os.path.join(self.results_path, "1_vp_source_all_severities.csv")
            df.to_csv(output_file_path, index=False)
            print(f"Archivo generado: {output_file_path}")
            
            return df

        
    
    def calculate_vulnerability_proneness(self, df_source, df_dependencies):
        """
        Calcula la vulnerability-proneness combinada (all) sumando todas las severidades y guarda los resultados,
        generando la columna 'vulnerability-proneness-all'.
        """
        # Combinar datos de código fuente y dependencias
        merged_df = pd.concat([df_source, df_dependencies], ignore_index=True)
        
        # Agrupar por 'repo_owner', 'repo_name' y 'Category'
        aggregated_df = merged_df.groupby(['repo_owner', 'repo_name', 'Category'], as_index=False).agg({
            'Number of Components': 'max',
            'Low': 'sum',
            'Medium': 'sum',
            'High': 'sum',
            'Critical': 'sum',
            'Total Vulnerabilities': 'sum',
            'CWE Tags': lambda tags: self.combine_cwe_tags(tags)
        })
        
        # Calcular vulnerability-proneness-all basado en la suma de las columnas de severidad
        aggregated_df['vulnerability-proneness-all'] = aggregated_df[['Low', 'Medium', 'High', 'Critical']].sum(axis=1)
        
        # Guardar el archivo resultante en la carpeta de resultados
        output_file_path = os.path.join(self.results_path, '1_aggregated_vulnerabilities_all_severities.csv')
        aggregated_df.to_csv(output_file_path, index=False)
        print(f"Archivo generado: {output_file_path}")
        
        return aggregated_df

