import pandas as pd
import os

class VulnerabilityAggregator:
    def __init__(self, results_path="results/"):
        self.results_path = results_path
        os.makedirs(self.results_path, exist_ok=True)  # Ensure the results directory exists

    @staticmethod
    def combine_cwe_tags(tags):
        """
        Combines CWE tags from different sources and removes duplicates.
        """
        combined = []
        for tag_list in tags:
            if pd.notna(tag_list):
                combined.extend(eval(tag_list) if isinstance(tag_list, str) else tag_list)
        return list(set(combined))
    
    def aggregate(self, df):
        """
        Aggregates vulnerability data by grouping it based on repository owner, name, and category.
        Summarizes key vulnerability metrics such as total count and severity levels.
        """
        aggregated_df = df.groupby(['repo_owner', 'repo_name', 'Category'], as_index=False).agg({
            'Number of Components': 'max',
            'Low': 'sum',
            'Medium': 'sum',
            'High': 'sum',
            'Critical': 'sum',
            'Total Vulnerabilities': 'sum',
            'CWE Tags': lambda tags: self.combine_cwe_tags(tags)
        })
        aggregated_df['Total Vulnerabilities'] = aggregated_df[['Low', 'Medium', 'High', 'Critical']].sum(axis=1)
        
        # Save aggregated data to results folder
        aggregated_file = os.path.join(self.results_path, "aggregated_vulnerabilities_summary.csv")
        aggregated_df.to_csv(aggregated_file, index=False)
        print(f"Aggregated data saved to: {aggregated_file}")
        
        # Calculate vulnerability-proneness (sum of High and Critical vulnerabilities)
        aggregated_df['vulnerability-proneness'] = aggregated_df['High'] + aggregated_df['Critical']
        vp_file = os.path.join(self.results_path, "vulnerabilities_proneness.csv")
        aggregated_df.to_csv(vp_file, index=False)
        print(f"Vulnerability-proneness data saved to: {vp_file}")
        
        return aggregated_df
