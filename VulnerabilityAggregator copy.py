import pandas as pd
import os

class VulnerabilityAggregator:
    def __init__(self, results_path="results/"):
        self.results_path = results_path
        os.makedirs(self.results_path, exist_ok=True)  # Asegurar que la carpeta de resultados exista

    @staticmethod
    def combine_cwe_tags(tags):
        """
        Combina etiquetas CWE de diferentes fuentes y elimina duplicados.
        """
        combined = []
        for tag_list in tags:
            if pd.notna(tag_list):
                combined.extend(eval(tag_list) if isinstance(tag_list, str) else tag_list)
        return list(set(combined))
    
    def aggregate(self, df):
        """
        Agrega datos de vulnerabilidades agrupando por propietario, nombre del repositorio y categoría.
        """
        aggregated_df = df.groupby(['repo_owner', 'repo_name', 'Category'], as_index=False).agg({
            'Number of Components': 'max',
            'Low': 'sum',
            'Medium': 'sum',
            'High': 'sum',
            'Critical': 'sum',
            'Total Vulnerabilities': 'sum',
            'CWE Tags': lambda tags: self.combine_cwe_tags(tags)
        })
        
        aggregated_df['Total Vulnerabilities'] = aggregated_df[['Low', 'Medium', 'High', 'Critical']].sum(axis=1)
        
        # Guardar datos agregados
        aggregated_file = os.path.join(self.results_path, "aggregated_vulnerabilities_summary.csv")
        aggregated_df.to_csv(aggregated_file, index=False)
        print(f"Aggregated data saved to: {aggregated_file}")
        
        return aggregated_df
    
    def calculate_vulnerability_proneness(self, df_source, df_dependencies):
        """
        Calcula la vulnerabilidad-proneness sumando todas las severidades y guarda los resultados.
        """
        # Combinar datos de código fuente y dependencias
        merged_df = pd.concat([df_source, df_dependencies], ignore_index=True)
        
        # Agregar vulnerabilidades por categoría
        aggregated_df = self.aggregate(merged_df)
        
        # Calcular vulnerability-proneness basado en todas las severidades
        aggregated_df['vulnerability-proneness-all'] = aggregated_df[['Low', 'Medium', 'High', 'Critical']].sum(axis=1)
        
        # Guardar los resultados en un nuevo archivo CSV
        output_file_path = os.path.join(self.results_path, '1_aggregated_vulnerabilities_all_severities.csv')
        aggregated_df.to_csv(output_file_path, index=False)
        print(f"Archivo generado: {output_file_path}")
        
        return aggregated_df
