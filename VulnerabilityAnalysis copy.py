import pandas as pd
import scipy.stats as stats
from itertools import combinations
from statsmodels.stats.multitest import multipletests
import os

class VulnerabilityAnalysis:
    def __init__(self, results_path="results/"):
        """
        Initializes the VulnerabilityAnalysis class with a results directory.
        """
        self.results_path = results_path
        os.makedirs(self.results_path, exist_ok=True)
    
    def compute_statistics(self, df):
            """
            Calcula estadísticas clave relacionadas con la vulnerabilidad-proneness (mínimo, máximo,
            media, mediana y desviación estándar) agrupadas por categoría.
            """
            # Si la columna 'vulnerability-proneness' no existe pero 'vulnerability-proneness-all' sí, renombrarla.
            if 'vulnerability-proneness' not in df.columns and 'vulnerability-proneness-all' in df.columns:
                df = df.rename(columns={'vulnerability-proneness-all': 'vulnerability-proneness'})
            
            # Agrupar por 'Category' y calcular estadísticas
            grouped = df.groupby('Category').agg(
                actions_count=('vulnerability-proneness', 'size'),
                vulnerabilities_list=('vulnerability-proneness', list),
                min_vp=('vulnerability-proneness', 'min'),
                max_vp=('vulnerability-proneness', 'max'),
                mean_vp=('vulnerability-proneness', 'mean'),
                median_vp=('vulnerability-proneness', 'median'),
                std_vp=('vulnerability-proneness', 'std')
            ).reset_index()
            
            # Filtrar categorías con al menos 2 acciones
            filtered = grouped[grouped['actions_count'] >= 2]
            filtered = filtered.sort_values(by='median_vp', ascending=True)
            
            # Guardar las estadísticas en un archivo CSV
            output_file = os.path.join(self.results_path, "vp_stats.csv")
            filtered.to_csv(output_file, index=False)
            print(f"Vulnerability-proneness statistics saved to: {output_file}")
            
            return filtered
    
    def perform_kruskal_wallis_test(self, df):
        """
        Performs the Kruskal-Wallis statistical test to compare the distribution of vulnerability proneness across categories.
        """
        df['vulnerabilities_list'] = df['vulnerabilities_list'].apply(
            lambda x: eval(x) if isinstance(x, str) and x.startswith('[') else x
        )
        category_data = {row['Category']: row['vulnerabilities_list'] for _, row in df.iterrows()}
        kruskal_stat, kruskal_p_value = stats.kruskal(*category_data.values())
        
        # Save Kruskal-Wallis results as a CSV file
        kruskal_results_df = pd.DataFrame([[kruskal_stat, kruskal_p_value]], columns=['Kruskal-Wallis Statistic', 'p-value'])
        kruskal_results_path = os.path.join(self.results_path, "kruskal_wallis_results.csv")
        kruskal_results_df.to_csv(kruskal_results_path, index=False)
        
        # Store test results in a text file
        test_results = [
            f"Kruskal-Wallis Test Statistic: {kruskal_stat:.4f}, p-value: {kruskal_p_value:.4f}"
        ]
        
        # If Kruskal-Wallis test is significant, perform pairwise Mann-Whitney U tests
        pairwise_results = []
        if kruskal_p_value <= 0.05:
            p_values = []
            comparisons = list(combinations(category_data.keys(), 2))

            for cat1, cat2 in comparisons:
                stat, p_value = stats.mannwhitneyu(category_data[cat1], category_data[cat2], alternative='two-sided')
                pairwise_results.append([cat1, cat2, stat, p_value])
                p_values.append(p_value)

            # Apply Bonferroni correction for multiple comparisons
            corrected_p_values = multipletests(p_values, method='bonferroni')[1]

            # Store pairwise results with corrected p-values
            pairwise_results_corrected = []
            for i, (cat1, cat2, stat, orig_p) in enumerate(pairwise_results):
                corrected_p = corrected_p_values[i]
                significance = "Significant" if corrected_p <= 0.05 else "Not Significant"
                pairwise_results_corrected.append([cat1, cat2, stat, orig_p, corrected_p, significance])

            # Convert to DataFrame and save results
            pairwise_results_path = os.path.join(self.results_path, "pairwise_mannwhitney_results.csv")
            pairwise_df = pd.DataFrame(pairwise_results_corrected, columns=['Category 1', 'Category 2', 'U-statistic', 'Original p-value', 'Corrected p-value', 'Significance'])
            pairwise_df.to_csv(pairwise_results_path, index=False)

            test_results.append("Significant differences found. Pairwise Mann-Whitney U test results saved in 'pairwise_mannwhitney_results.csv'.")
        else:
            test_results.append("No significant differences found between categories.")
        
        # Save Kruskal-Wallis test results as a text file
        kruskal_txt_path = os.path.join(self.results_path, "kruskal_wallis_results.txt")
        with open(kruskal_txt_path, 'w', encoding='utf-8') as f:
            f.write("\n".join(test_results))
        print(f"Kruskal-Wallis test results saved to: {kruskal_txt_path}")
        
        return kruskal_stat, kruskal_p_value
